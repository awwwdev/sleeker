@mixin create-classes-for-one-color ($class, $property, $variable) {
  .#{class} {
    #{$property} : var(#{$variable});
  }

  @for $i from 1 through 12 {
    .#{$class}#{$i} {
        #{$property} : var(#{$variable}-#{$i});
    }
  }

  @for $i from 1 through 12 {
    .#{$class}#{$i}a {
        #{$property} : var(#{$variable}-a-#{$i});
      }
  }
}


@mixin create-classes-for-all-colors ($class , $property) {

  $color-scales: 'amber', 'blue', 'bronze', 'brown', 'crimson', 'cyan', 'gold',
  'grass', 'gray', 'green', 'indigo', 'lime', 'mauve', 'mint', 'olive',
  'orange', 'pink', 'pulm', 'purple', 'red', 'sage', 'sand', 'sky', 'slate',
  'teal', 'tomato', 'violet', 'yellow';

  @each $color-scale in $color-scales {
    @include create-classes-for-one-color ($class: #{$class}\:#{$color-scale}, $property: $property, $variable: --rdx-#{$color-scale});
  }
  
  $semantic-colors: 'prm', 'scnd', 'trt', 'info' , 'success' , 'warning' , 'error';
  @each $semantic-color in $semantic-colors {
    @include create-classes-for-one-color ($class: #{$class}\:#{$semantic-color}, $property: $property, $variable: --slk-#{$semantic-color});
  }
}


@mixin assign-color-to-semantic-color ($semantic-color , $color-scale) {

  .--#{$semantic-color}\:--#{$color-scale} {
    --slk-#{$semantic-color}: var(--rdx-#{$color-scale});

    @for $i from 1 through 12 {
      --slk-#{$semantic-color}-#{$i}: var(--rdx-#{$color-scale}-#{$i});
    }

    @for $i from 1 through 12 {
      --slk-#{$semantic-color}-a-#{$i}: var(--rdx-#{$color-scale}-a-#{$i});
    }
  }
}

@mixin define-assigning-classes ($semantic-color) {
  $color-scales: 'amber', 'blue', 'bronze', 'brown', 'crimson', 'cyan', 'gold',
  'grass', 'gray', 'green', 'indigo', 'lime', 'mauve', 'mint', 'olive',
  'orange', 'pink', 'pulm', 'purple', 'red', 'sage', 'sand', 'sky', 'slate',
  'teal', 'tomato', 'violet', 'yellow';

  @each $color-scale in $color-scales {
    @include assign-color-to-semantic-color($semantic-color: $semantic-color , $color-scale: $color-scale);
  }

}